'use strict';

describe('mock.data loaded', function () {
    var MockData, $rootScope, $q;
    beforeEach(module('app'));

    beforeEach(function () {

        inject(function (_$q_, mockData, _$rootScope_) {
            MockData = mockData;
            $q = _$q_;
            $rootScope = _$rootScope_.$new();

            spyOn(MockData, 'data').and.callFake(function () {
                // var deferred = _$q_.defer();
                // deferred.resolve(555);
                //return deferred.promise;
            });
            $rootScope.$apply();
        });
    });


    it('received data response', function () {
        expect(MockData.data).toBeDefined();

        var deferred = $q.defer();
        MockData.data.and.returnValue(deferred.promise);
        deferred.resolve(true);

        var respns, err;
        MockData.data().then(function (data) {
            respns = data;
        }, function (error) {
            var respns;
            err = error
        })

        $rootScope.$apply();

        expect(MockData.data).toHaveBeenCalled();
        expect(respns).toBe(true);
        expect(err).toBeUndefined()

    })


    it('received data response on error', function () {
        var deferred = $q.defer();
        MockData.data.and.returnValue(deferred.promise);
        deferred.reject(true);

        var respns, err;
        MockData.data().then(function (data) {
            respns = data;
        }, function (error) {
            var respns;
            err = error;
        })

        $rootScope.$apply();

        expect(MockData.data).toHaveBeenCalled();
        expect(respns).toBeUndefined();
        expect(err).toBe(true);
    })


    /*
        it('should load a list of books on init', function () {
            expect(booksController.booksList).toBeDefined();
            expect(booksController.booksList).toBe(mockBookList);
            expect(booksController.booksList.length).toBe(3);
        })
    
        it('should select a book for the details view', function () {
            expect(booksController.selectedBook).toBeUndefined();
    
            booksController.selectBook(mockBookList[0]);
            expect(booksController.selectedBook).toBe(mockBookList[0]);
    
            booksController.selectBook(mockBookList[2]);
            expect(booksController.selectedBook).toBe(mockBookList[2]);
        })
    
        it('should call the service to delete a book', function () {
            var deferred = $q.defer();
            booksServiceMock.deleteBook.and.returnValue(deferred.promise);
    
            booksController.deleteBook('2');
            expect(booksServiceMock.deleteBook).toHaveBeenCalledWith('2');
        })
    
        it('should reload the book list after successfully deleting a book', function () {
            var deferred = $q.defer();
            booksServiceMock.deleteBook.and.returnValue(deferred.promise);
    
            booksServiceMock.getBooks.calls.reset();
            expect(booksServiceMock.getBooks).not.toHaveBeenCalled();
    
            booksController.deleteBook('1');
            deferred.resolve(true);
            $rootScope.$apply();
            expect(booksServiceMock.getBooks).toHaveBeenCalled();
        })
        */

});

